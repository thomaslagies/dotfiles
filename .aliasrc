alias .....='cd ../../../../'
alias ....='cd ../../../'
alias ...='cd ../../'
alias ..='cd ..'
alias c='clear'
alias co='co-authored-by-fn'
alias dco=docker-compose
alias grep='grep --color=auto'
alias ll='ls -hNla --color=auto --group-directories-first'
alias ls='ls --color=auto'
alias pp='curl --max-time 5 -s parrot.live'
alias r='exec zsh'
alias stats=bpytop
alias tf=terraform
alias mock="node -p \"process.argv.slice(1).map(w => w.split('').map((c)=>Math.random()<=0.5?c.toUpperCase():c.toLowerCase()).join('')).join(' ')\""
alias wp='nitrogen ~/git/dotfiles/wallpapers --random --set-zoom-fill'

function co-authored-by-fn () {
  for handle in "$@"
  do
    echo "Co-authored-by: $handle <$handle@users.noreply.github.com>"
  done
} 

function pkey () {
  cat ~/.ssh/id_rsa.pub | xclip -selection clipboard
}

function dwipe() {
  if [ $(docker container ls -aq) ]
  then
    echo "Stopping and removing all containers"
    docker container stop $(docker container ls -aq)
    echo "Removing all stopped containers, networks, dangling images and build cache"
    docker system prune --force --volumes
  fi
}

function iwipe {
  echo "Removing all images"
	docker image prune --force
}

# Set Kubernetes client to new context
function kcctx {
  if [ -n "$1" ]; then
    selection="$1"
    if [[ $selection =~ ^[0-9]+$ ]]; then
      # Line number entered, get context from that line
      selection=$(kubectl config get-contexts -o name --no-headers | sed "${selection}q;d")
    fi
    kubectl config use-context "${selection}"
  else
    kubectl config get-contexts --no-headers | tr -s " " | cut -d " " -f1,2,5 | sed 's/ / | /g' | sed -e 's/^ \| /  | /g' | nl -n rn -w 3 -s ' '
  fi
}

function testjob {
  bytes=`expr 1024 \* 1024 \* ${1:-1}`
  printer=${2:-printer1}
  rlpr -Hlocalhost -P$printer --verbose <<< `cat /dev/urandom | base64 | head -c $bytes`
}