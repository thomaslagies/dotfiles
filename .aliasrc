alias .='nvim .'
alias ll='ls -lash'
alias doc=docker-compose
alias dco=docker-compose #hehe
alias grep='grep --color=auto'
alias ll='gls -lash --color=auto --group-directories-first'
alias ls='ls --color=auto'
alias nr='npm run'
alias pp='curl --max-time 5 -s parrot.live'
alias tf=terraform
alias tfa='terraform apply --auto-approve'
alias tfd='terraform destroy --auto-approve'
alias bye="sh $HOME/git/worktime/bye.sh"
alias pick='git log -300 --oneline --color $1 | fzf -m --ansi --preview "git show --color {1}" | awk "{print $1}"'
alias clc='fc -ln -1 | pbcopy'
alias ckw='gdate +"Current calendar week: %U"'
alias loadnvm='[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'

alias gst='git status'
alias gcam='git add $1 && git commit -m . && git status'
alias gp='git push'
alias gl='git pull'
alias gcm='git checkout master && git pull'

alias brewu='brew update && brew upgrade && echo "Pinned package not upgraded:" && brew list --pinned'

ghw () {
  b=$(git rev-parse --abbrev-ref HEAD)
  gh repo view -w -b $b
}

dcl() {
  tmux new-window "docker-compose logs -f $1"
  shift
  for i in "$@"; do
    tmux split-window -h "docker-compose logs -f $i"
    tmux select-layout even-horizontal
  done
  tmux select-pane -t 0
}

function pass() {
    keepassxc-cli show -s -f Password /path/to/your/database.kdbx "$1"
}

function ghc () {
  gh repo clone sealsystems/$(cat ~/.repos | fzf --sync --height 60% --reverse --select-1 --query "'${1}")
}

function npmc () {
  rm -rf package-lock.json node_modules
  npm i
}

function npmu () {
  cd $(git rev-parse --show-toplevel)
  npm outdated
  ncu --upgrade
  rm package-lock.json
  npm i
}

function dld () {
  # displays last 5 working days
  find $HOME/git/worktime/files -type f | sort -n | tail -5 | xargs -I % echo "echo ---; echo % | cut -d "/" -f7; cat %" | sh
}

function dps () {
 docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.State}}\t{{.CreatedAt}}"
}

function mock {
  MOCK=$(node -p "process.argv.slice(1).map(w => w.split('').map((c)=>Math.random()<=0.5?c.toUpperCase():c.toLowerCase()).join('')).join(' ')" $*)
  echo $MOCK
  echo $MOCK | xclip -selection clipboard
}

function co {
  for handle in "$@"
  do
    echo "Co-authored-by: $handle <$handle@users.noreply.github.com>"
  done
} 

function extip {
  curl ifconfig.me
}

function fizy {
  find . -type d \( -path ./node_modules -o -path ./.git \) -prune -o -type f | fzy
}

function gho {
  cd $(git rev-parse --show-toplevel)
}

function pkey  {
  cat ~/.ssh/id_rsa.pub | xclip -selection clipboard
}

function gdi() {
  preview="git diff $@ --color=always -- {-1}"
  git diff $@ --name-only | fzf -m --ansi --preview $preview
}

function fzb() {
  local files
    IFS=$'\n' files=($(fzf --preview 'bat {-1} --color=always')) && nvim "${files[@]}"
}

function dwipe {
  echo "Stopping and removing all containers"
  docker kill $(docker container ls -aq)
  echo "Removing all stopped containers, networks, dangling images and build cache"
  docker system prune --force --volumes
}

function drestart () {
  echo `Stopping, removing, restarting and attaching to $1`
  docker compose kill $1 && docker compose rm $1 -f && docker compose up -d && docker compose logs -f $1
}

function iwipe {
  echo "Removing all images"
	docker image prune -a -f
}

function update-node {
  PREVIOUS_NODE_VERSION=$(nvm version)
  GITHUB_TOKEN=${GITHUB_TOKEN:-`grep authToken $HOME/.npmrc | sed -r 's|//npm.pkg.github.com/:_authToken=(.*)$|\1|'`}
  NODE_VERSION=`curl -sf -H 'Cache-Control: no-cache' "https://$GITHUB_TOKEN@raw.githubusercontent.com/sealsystems/generator-seal-node/master/lib/constants.js" | grep "NODE_VERSION" | cut -f2 -d"'"`
  [ $NODE_VERSION ]
  nvm install --default $NODE_VERSION --reinstall-packages-from=$PREVIOUS_NODE_VERSION || echo "NODE_VERSION not found, invalid GITHUB_TOKEN?"
}

